{"ast":null,"code":"import _objectSpread from\"C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useContext,createContext,useState}from'react';import{dummyData}from'../Data/DummyData';import{jsx as _jsx}from\"react/jsx-runtime\";var studentContext=/*#__PURE__*/createContext();export var ContextProvider=function ContextProvider(_ref){var children=_ref.children;var _useState=useState(dummyData),_useState2=_slicedToArray(_useState,2),studentData=_useState2[0],setStudentData=_useState2[1];/*더미 데이터로 학생 데이터 초기화*/var _useState3=useState({//현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\nid:null,name:null,grade:null,profileImg:null}),_useState4=_slicedToArray(_useState3,2),nowStudentData=_useState4[0],setNowStudentData=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),search=_useState6[0],setSearch=_useState6[1];//검색창 입력 값 받아옴\nvar filterStudent=function filterStudent(filterKeyword){//검색어가 들어갈 때 필터링하는 함수\nif(filterKeyword===''){//공백이면 그냥 다 출력하도록\nreturn studentData;}else{//아니면 문자열 내부에 키워드가 포함된 애들만 필터링\nreturn studentData.filter(function(student){return student.name.includes(filterKeyword);});}};var addStudent=function addStudent(newStudentData){// 학생을 추가하는 함수\nsetStudentData([].concat(_toConsumableArray(studentData),[newStudentData]));/* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */};var delStudent=function delStudent(){//학생을 제거하는 함수\nsetStudentData(studentData.filter(function(student){return student.id!==nowStudentData.id;}));setNowStudentData({// 현재 선택된 학생 데이터는 '없다'로 설정\nid:Math.random(),name:null,grade:null,profileImg:null});};var checkValidity=function checkValidity(Data){if(/[가-힣]{2,3}/g.test(Data.name)&&['1','2','3'].includes(Data.grade)){//2~3글자, 한글, 학년조건 체크\nvar tmp=studentData.filter(function(student){return student.grade===Data.grade;});var tmp2=tmp.filter(function(student){return student.name===Data.name;});//학년, 이름으로 필터링\nif(tmp2.length===0){modifyStudent(Data.id,Data);//학생 원본 데이터 수정\n}else{window.alert('한 학년에 동명이인이 있습니다.');}}else{// 수정 조건에 안맞는 경우\nwindow.alert('이름은 한글 2~3글자, 학년은 1,2,3 중 하나로 수정할 수 있습니다.');}};var modifyStudent=function modifyStudent(id,data){// 학생 정보를 수정하는 함수\nsetStudentData(studentData.map(function(student){return student.id===id?_objectSpread(_objectSpread({},student),data):student;}));// id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\n};return/*#__PURE__*/_jsx(studentContext.Provider,{value:{studentData:studentData,setStudentData:setStudentData,nowStudentData:nowStudentData,setNowStudentData:setNowStudentData,search:search,setSearch:setSearch,filterStudent:filterStudent,addStudent:addStudent,delStudent:delStudent,modifyStudent:modifyStudent},children:children});};export var useStudentContext=function useStudentContext(){return useContext(studentContext);};","map":{"version":3,"sources":["C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/src/context/Context.js"],"names":["useContext","createContext","useState","dummyData","studentContext","ContextProvider","children","studentData","setStudentData","id","name","grade","profileImg","nowStudentData","setNowStudentData","search","setSearch","filterStudent","filterKeyword","filter","student","includes","addStudent","newStudentData","delStudent","Math","random","checkValidity","Data","test","tmp","tmp2","length","modifyStudent","window","alert","data","map","useStudentContext"],"mappings":"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","sourcesContent":["import {useContext, createContext, useState} from 'react';\r\nimport {dummyData} from '../Data/DummyData';\r\n\r\n\r\nconst studentContext = createContext();\r\n\r\nexport const ContextProvider = ({children}) => {\r\n    const [studentData, setStudentData] = useState(dummyData); /*더미 데이터로 학생 데이터 초기화*/\r\n    const [nowStudentData, setNowStudentData] = useState({      //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\r\n        id: null,\r\n        name: null,\r\n        grade: null,\r\n        profileImg: null\r\n    });\r\n\r\n    const [search, setSearch] = useState(''); //검색창 입력 값 받아옴\r\n\r\n\r\n    const filterStudent = (filterKeyword) => { //검색어가 들어갈 때 필터링하는 함수\r\n        if (filterKeyword === '') { //공백이면 그냥 다 출력하도록\r\n            return studentData;\r\n        } else { //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\r\n            return studentData.filter(student => student.name.includes(filterKeyword));\r\n        }\r\n    }\r\n\r\n    const addStudent = (newStudentData) => { // 학생을 추가하는 함수\r\n        setStudentData([...studentData, newStudentData]);\r\n\r\n        /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\r\n    }\r\n    const delStudent = () => { //학생을 제거하는 함수\r\n        setStudentData(studentData.filter(student => student.id !== nowStudentData.id));\r\n        setNowStudentData({ // 현재 선택된 학생 데이터는 '없다'로 설정\r\n            id: Math.random(),\r\n            name: null,\r\n            grade: null,\r\n            profileImg: null\r\n        });\r\n    }\r\n\r\n    const checkValidity = (Data) => {\r\n        if ( /[가-힣]{2,3}/g.test(Data.name)  && ['1','2','3'].includes(Data.grade) ) { //2~3글자, 한글, 학년조건 체크\r\n            const tmp = studentData.filter(student => student.grade === Data.grade);\r\n            const tmp2 = tmp.filter(student => student.name === Data.name); //학년, 이름으로 필터링\r\n            if (tmp2.length===0) {\r\n                modifyStudent(Data.id, Data); //학생 원본 데이터 수정\r\n            } else {\r\n                window.alert('한 학년에 동명이인이 있습니다.');\r\n            }\r\n\r\n\r\n        } else { // 수정 조건에 안맞는 경우\r\n            window.alert('이름은 한글 2~3글자, 학년은 1,2,3 중 하나로 수정할 수 있습니다.');\r\n        }\r\n    }\r\n\r\n\r\n    const modifyStudent = (id, data) => { // 학생 정보를 수정하는 함수\r\n        setStudentData(studentData.map(student => student.id === id ? ({...student, ...data}) : student));\r\n        // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\r\n    }\r\n\r\n    return (\r\n        <studentContext.Provider value={{\r\n            studentData,\r\n            setStudentData,\r\n            nowStudentData,\r\n            setNowStudentData,\r\n            search,\r\n            setSearch,\r\n            filterStudent,\r\n            addStudent,\r\n            delStudent,\r\n            modifyStudent\r\n        }}>\r\n            {children}\r\n        </studentContext.Provider>\r\n    )\r\n};\r\n\r\nexport const useStudentContext = () => useContext(studentContext);"]},"metadata":{},"sourceType":"module"}