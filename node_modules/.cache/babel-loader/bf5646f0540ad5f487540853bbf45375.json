{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hdchr\\\\OneDrive\\\\Desktop\\\\waffle-rookies-19.5-react-assignment-2\\\\src\\\\context\\\\Context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState } from 'react';\nimport { dummyData } from '../Data/DummyData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst studentContext = /*#__PURE__*/createContext();\nexport const ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [studentData, setStudentData] = useState(dummyData);\n  /*더미 데이터로 학생 데이터 초기화*/\n\n  const [nowStudentData, setNowStudentData] = useState({\n    //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\n    id: null,\n    name: null,\n    grade: null,\n    profileImg: null\n  });\n  const [search, setSearch] = useState(''); //검색창 입력 값 받아옴\n\n  const percentage = i => {\n    return Math.round(studentData.filter(student => student.grade === i).length * 100 / studentData.length);\n  };\n\n  const [dashBoardData, setDashBoardData] = useState(studentData.length === 0 ? null : [{\n    name: '1st',\n    value: percentage(1)\n  }, {\n    name: '2nd',\n    value: percentage(2)\n  }, {\n    name: '3rd',\n    value: percentage(3)\n  }]);\n\n  const filterStudent = filterKeyword => {\n    //검색어가 들어갈 때 필터링하는 함수\n    if (filterKeyword === '') {\n      //공백이면 그냥 다 출력하도록\n      return studentData;\n    } else {\n      //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\n      return studentData.filter(student => student.name.includes(filterKeyword));\n    }\n  };\n\n  const addStudent = newStudentData => {\n    // 학생을 추가하는 함수\n    setStudentData([...studentData, newStudentData]);\n    /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\n  };\n\n  const delStudent = () => {\n    //학생을 제거하는 함수\n    setStudentData(studentData.filter(student => student.id !== nowStudentData.id));\n    setNowStudentData({\n      // 현재 선택된 학생 데이터는 '없다'로 설정\n      id: Math.random(),\n      name: null,\n      grade: null,\n      profileImg: null\n    });\n  };\n\n  const checkValidity = Data => {\n    //수정 시 변경조건 체크는 과제2에선 무쓸모\n    if (/[가-힣]{2,3}/g.test(Data.name) && ['1', '2', '3'].includes(Data.grade)) {\n      //2~3글자, 한글, 학년조건 체크\n      const tmp = studentData.filter(student => student.grade === Data.grade);\n      const tmp2 = tmp.filter(student => student.name === Data.name); //학년, 이름으로 필터링\n\n      if (tmp2.length === 0) {\n        modifyStudent(Data.id, Data); //학생 원본 데이터 수정\n      } else {\n        window.alert('한 학년에 동명이인이 있습니다.');\n      }\n    } else {\n      // 수정 조건에 안맞는 경우\n      window.alert('이름은 한글 2~3글자, 학년은 1,2,3 중 하나로 수정할 수 있습니다.');\n    }\n  };\n\n  const modifyStudent = (id, data) => {\n    // 학생 정보를 수정하는 함수\n    setStudentData(studentData.map(student => student.id === id ? { ...student,\n      ...data\n    } : student)); // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\n  };\n\n  return /*#__PURE__*/_jsxDEV(studentContext.Provider, {\n    value: {\n      studentData,\n      setStudentData,\n      nowStudentData,\n      setNowStudentData,\n      search,\n      setSearch,\n      dashBoardData,\n      setDashBoardData,\n      filterStudent,\n      addStudent,\n      delStudent,\n      modifyStudent,\n      percentage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"PvdsWYTRI5qXaIMhmrfwie8pZ7Q=\");\n\n_c = ContextProvider;\nexport const useStudentContext = () => {\n  _s2();\n\n  return useContext(studentContext);\n};\n\n_s2(useStudentContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/src/context/Context.js"],"names":["useContext","createContext","useState","dummyData","studentContext","ContextProvider","children","studentData","setStudentData","nowStudentData","setNowStudentData","id","name","grade","profileImg","search","setSearch","percentage","i","Math","round","filter","student","length","dashBoardData","setDashBoardData","value","filterStudent","filterKeyword","includes","addStudent","newStudentData","delStudent","random","checkValidity","Data","test","tmp","tmp2","modifyStudent","window","alert","data","map","useStudentContext"],"mappings":"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","sourcesContent":["import {useContext, createContext, useState} from 'react';\r\nimport {dummyData} from '../Data/DummyData';\r\n\r\n\r\nconst studentContext = createContext();\r\n\r\nexport const ContextProvider = ({children}) => {\r\n    const [studentData, setStudentData] = useState(dummyData); /*더미 데이터로 학생 데이터 초기화*/\r\n    const [nowStudentData, setNowStudentData] = useState({      //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\r\n        id: null,\r\n        name: null,\r\n        grade: null,\r\n        profileImg: null\r\n    });\r\n\r\n    const [search, setSearch] = useState(''); //검색창 입력 값 받아옴\r\n\r\n    const percentage = (i) => {\r\n        return Math.round((studentData.filter(student=>student.grade===i).length*100)/studentData.length)\r\n    }\r\n    const [dashBoardData, setDashBoardData] = useState(studentData.length === 0 ? null : [{name:'1st', value:percentage(1)}, {name:'2nd', value:percentage(2)}, {name:'3rd', value:percentage(3)}]);\r\n\r\n    const filterStudent = (filterKeyword) => { //검색어가 들어갈 때 필터링하는 함수\r\n        if (filterKeyword === '') { //공백이면 그냥 다 출력하도록\r\n            return studentData;\r\n        } else { //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\r\n            return studentData.filter(student => student.name.includes(filterKeyword));\r\n        }\r\n    }\r\n\r\n    const addStudent = (newStudentData) => { // 학생을 추가하는 함수\r\n        setStudentData([...studentData, newStudentData]);\r\n\r\n        /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\r\n    }\r\n    const delStudent = () => { //학생을 제거하는 함수\r\n        setStudentData(studentData.filter(student => student.id !== nowStudentData.id));\r\n        setNowStudentData({ // 현재 선택된 학생 데이터는 '없다'로 설정\r\n            id: Math.random(),\r\n            name: null,\r\n            grade: null,\r\n            profileImg: null\r\n        });\r\n    }\r\n\r\n    const checkValidity = (Data) => { //수정 시 변경조건 체크는 과제2에선 무쓸모\r\n        if ( /[가-힣]{2,3}/g.test(Data.name)  && ['1','2','3'].includes(Data.grade) ) { //2~3글자, 한글, 학년조건 체크\r\n            const tmp = studentData.filter(student => student.grade === Data.grade);\r\n            const tmp2 = tmp.filter(student => student.name === Data.name); //학년, 이름으로 필터링\r\n            if (tmp2.length===0) {\r\n                modifyStudent(Data.id, Data); //학생 원본 데이터 수정\r\n            } else {\r\n                window.alert('한 학년에 동명이인이 있습니다.');\r\n            }\r\n\r\n\r\n        } else { // 수정 조건에 안맞는 경우\r\n            window.alert('이름은 한글 2~3글자, 학년은 1,2,3 중 하나로 수정할 수 있습니다.');\r\n        }\r\n    }\r\n\r\n\r\n    const modifyStudent = (id, data) => { // 학생 정보를 수정하는 함수\r\n        setStudentData(studentData.map(student => student.id === id ? ({...student, ...data}) : student));\r\n        // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\r\n    }\r\n\r\n    return (\r\n        <studentContext.Provider value={{\r\n            studentData,\r\n            setStudentData,\r\n            nowStudentData,\r\n            setNowStudentData,\r\n            search,\r\n            setSearch,\r\n            dashBoardData, setDashBoardData,\r\n            filterStudent,\r\n            addStudent,\r\n            delStudent,\r\n            modifyStudent,\r\n            percentage\r\n        }}>\r\n            {children}\r\n        </studentContext.Provider>\r\n    )\r\n};\r\n\r\nexport const useStudentContext = () => useContext(studentContext);"]},"metadata":{},"sourceType":"module"}