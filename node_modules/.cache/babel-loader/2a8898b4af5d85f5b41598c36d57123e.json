{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hdchr\\\\OneDrive\\\\Desktop\\\\waffle-rookies-19.5-react-assignment-2\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Header from './component/Header/Header';\nimport DashBoard from './component/DashBoard/DashBoard';\nimport ControlBar from './component/ControlBar/ControlBar';\nimport Table from './component/Table/Table';\nimport Detail from './component/Detail/Detail';\nimport { useState } from 'react';\nimport DetailNotSelected from './component/Detail/DetailNotSelected';\nimport { dummyData } from './Data/DummyData';\nimport StudentAddModal from './component/Modal/StudentAddModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /*const [Clicked, setClicked] = useState(0); 생각해보니 필요없음. 현재 클릭한 학생 데이터의\r\n  * null 여부로 판단. */\n\n  /*지금 Table 에서 학생이 클릭되었는지 - 0이 false, 1이 true*/\n  //==> 무시하시면 됩니다.\n  const [stuData, setstuData] = useState(dummyData);\n  /*더미 데이터로 학생 데이터 초기화*/\n\n  const [nowstuData, setnowstuData] = useState({\n    //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\n    id: null,\n    name: null,\n    grade: null,\n    profileImg: null\n  });\n  const [search, setsearch] = useState(''); //검색창 입력 값 받아옴\n\n  const filterStudent = filterKeyword => {\n    //검색어가 들어갈 때 필터링하는 함수\n    if (filterKeyword === '') {\n      //공백이면 그냥 다 출력하도록\n      return stuData;\n    } else {\n      //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\n      return stuData.filter(student => student.name.includes(filterKeyword));\n    }\n  };\n\n  const addStudent = newstuData => {\n    // 학생을 추가하는 함수\n    setstuData([...stuData, newstuData]);\n    /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\n  };\n\n  const delStudent = id => {\n    //학생을 제거하는 함수\n    setstuData(stuData.filter(student => student.id !== id));\n  };\n\n  const modifyStudent = (id, data) => {\n    // 학생 정보를 수정하는 함수\n    setstuData(stuData.map(student => student.id === id ? { ...student,\n      ...data\n    } : student)); // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\n  };\n\n  const [modalOpen, setModalOpen] = useState(false); // 모달은 기본값이 꺼진 상태로\n\n  const openModal = () => {\n    //제목이 곧 내용\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    //제목이 곧 내용\n    setModalOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'App',\n    children: [/*#__PURE__*/_jsxDEV(StudentAddModal, {\n      setnowstuData: setnowstuData,\n      stuData: stuData,\n      addStudent: addStudent,\n      closeModal: closeModal,\n      modalOpen: modalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DashBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'Down',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'Left',\n        children: [/*#__PURE__*/_jsxDEV(ControlBar, {\n          search: search,\n          setsearch: setsearch,\n          openModal: openModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          search: search,\n          filterStudent: filterStudent,\n          nowstuData: nowstuData,\n          setnowstuData: setnowstuData,\n          stuData: stuData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'Right',\n        children: nowstuData.name === null ? /*#__PURE__*/_jsxDEV(DetailNotSelected, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 49\n        }, this) :\n        /*#__PURE__*/\n        //현재 선택된 학생이 있는지 판단\n        _jsxDEV(Detail, {\n          delStudent: delStudent,\n          modifyStudent: modifyStudent,\n          stuData: stuData,\n          nowstuData: nowstuData,\n          setnowstuData: setnowstuData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"5pb/EGXRGLHSmDpLb6CrsT3jkzM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/src/App.js"],"names":["Header","DashBoard","ControlBar","Table","Detail","useState","DetailNotSelected","dummyData","StudentAddModal","App","stuData","setstuData","nowstuData","setnowstuData","id","name","grade","profileImg","search","setsearch","filterStudent","filterKeyword","filter","student","includes","addStudent","newstuData","delStudent","modifyStudent","data","map","modalOpen","setModalOpen","openModal","closeModal"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport Header from './component/Header/Header';\r\nimport DashBoard from './component/DashBoard/DashBoard';\r\nimport ControlBar from './component/ControlBar/ControlBar';\r\nimport Table from './component/Table/Table';\r\nimport Detail from './component/Detail/Detail';\r\nimport {useState} from 'react'\r\nimport DetailNotSelected from './component/Detail/DetailNotSelected';\r\nimport {dummyData} from './Data/DummyData';\r\nimport StudentAddModal from './component/Modal/StudentAddModal';\r\n\r\nfunction App() {\r\n    /*const [Clicked, setClicked] = useState(0); 생각해보니 필요없음. 현재 클릭한 학생 데이터의\r\n    * null 여부로 판단. */       /*지금 Table 에서 학생이 클릭되었는지 - 0이 false, 1이 true*/ //==> 무시하시면 됩니다.\r\n\r\n    const [stuData, setstuData] = useState(dummyData); /*더미 데이터로 학생 데이터 초기화*/\r\n    const [nowstuData, setnowstuData] = useState({      //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\r\n        id: null,\r\n        name: null,\r\n        grade: null,\r\n        profileImg: null\r\n    });\r\n\r\n    const [search, setsearch] = useState(''); //검색창 입력 값 받아옴\r\n\r\n\r\n    const filterStudent = (filterKeyword) => { //검색어가 들어갈 때 필터링하는 함수\r\n        if (filterKeyword === '') { //공백이면 그냥 다 출력하도록\r\n            return stuData;\r\n        } else { //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\r\n            return stuData.filter(student => student.name.includes(filterKeyword));\r\n        }\r\n    }\r\n\r\n    const addStudent = (newstuData) => { // 학생을 추가하는 함수\r\n        setstuData([...stuData, newstuData]);\r\n\r\n        /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\r\n    }\r\n    const delStudent = (id) => { //학생을 제거하는 함수\r\n        setstuData(stuData.filter(student => student.id !== id));\r\n    }\r\n\r\n\r\n    const modifyStudent = (id, data) => { // 학생 정보를 수정하는 함수\r\n        setstuData(stuData.map(student => student.id === id ? ({...student, ...data}) : student));\r\n        // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\r\n    }\r\n\r\n\r\n    const [modalOpen, setModalOpen] = useState(false); // 모달은 기본값이 꺼진 상태로\r\n\r\n    const openModal = () => { //제목이 곧 내용\r\n        setModalOpen(true);\r\n    }\r\n    const closeModal = () => { //제목이 곧 내용\r\n        setModalOpen(false);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <StudentAddModal setnowstuData={setnowstuData} stuData={stuData} addStudent={addStudent} closeModal={closeModal}\r\n                             modalOpen={modalOpen}/>\r\n            <Header/>\r\n            <DashBoard/>\r\n            <div className={'Down'}>\r\n                <div className={'Left'}>\r\n                    <ControlBar search={search} setsearch={setsearch}\r\n                                openModal={openModal}/>\r\n                    <Table search={search} filterStudent={filterStudent}\r\n                           nowstuData={nowstuData}\r\n                           setnowstuData={setnowstuData} stuData={stuData}/>\r\n                </div>\r\n                <div className={'Right'}>\r\n                    {nowstuData.name === null ? <DetailNotSelected/> : //현재 선택된 학생이 있는지 판단\r\n                        <Detail\r\n                            delStudent={delStudent}\r\n                            modifyStudent={modifyStudent}\r\n                            stuData={stuData} nowstuData={nowstuData} setnowstuData={setnowstuData}/>}\r\n                </div>\r\n                {/*선택된 학생이 있으면 Detail 표시, 없으면 메세지창을 표시*/}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}