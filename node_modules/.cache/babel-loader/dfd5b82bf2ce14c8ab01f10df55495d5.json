{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hdchr\\\\OneDrive\\\\Desktop\\\\waffle-rookies-19.5-react-assignment-2\\\\src\\\\context\\\\Context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useState } from 'react';\nimport { dummyData } from '../Data/DummyData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst studentContext = /*#__PURE__*/createContext();\nexport const ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [studentData, setStudentData] = useState(dummyData);\n  /*더미 데이터로 학생 데이터 초기화*/\n\n  const [nowStudentData, setNowStudentData] = useState({\n    //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\n    id: null,\n    name: null,\n    grade: null,\n    profileImg: null\n  });\n  const [search, setSearch] = useState(''); //검색창 입력 값 받아옴\n\n  const filterStudent = filterKeyword => {\n    //검색어가 들어갈 때 필터링하는 함수\n    if (filterKeyword === '') {\n      //공백이면 그냥 다 출력하도록\n      return studentData;\n    } else {\n      //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\n      return studentData.filter(student => student.name.includes(filterKeyword));\n    }\n  };\n\n  const addStudent = newStudentData => {\n    // 학생을 추가하는 함수\n    setStudentData([...studentData, newStudentData]);\n    /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\n  };\n\n  const delStudent = id => {\n    //학생을 제거하는 함수\n    setStudentData(studentData.filter(student => student.id !== id));\n  };\n\n  const modifyStudent = (id, data) => {\n    // 학생 정보를 수정하는 함수\n    setStudentData(studentData.map(student => student.id === id ? { ...student,\n      ...data\n    } : student)); // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\n  };\n\n  return /*#__PURE__*/_jsxDEV(studentContext.Provider, {\n    value: {\n      studentData,\n      setStudentData,\n      nowStudentData,\n      setNowStudentData,\n      search,\n      setSearch,\n      filterStudent,\n      addStudent,\n      delStudent,\n      modifyStudent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"zuj7vPV3xUvC9BMx52y41+kOZus=\");\n\n_c = ContextProvider;\nexport const useStudentContext = () => {\n  _s2();\n\n  return useContext(Context);\n};\n\n_s2(useStudentContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/hdchr/OneDrive/Desktop/waffle-rookies-19.5-react-assignment-2/src/context/Context.js"],"names":["useContext","createContext","useState","dummyData","studentContext","ContextProvider","children","studentData","setStudentData","nowStudentData","setNowStudentData","id","name","grade","profileImg","search","setSearch","filterStudent","filterKeyword","filter","student","includes","addStudent","newStudentData","delStudent","modifyStudent","data","map","useStudentContext","Context"],"mappings":";;;;AAAA,SAAQA,UAAR,EAAoBC,aAApB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAAQC,SAAR,QAAwB,mBAAxB;;AAGA,MAAMC,cAAc,gBAAGH,aAAa,EAApC;AAEA,OAAO,MAAMI,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC3C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAACC,SAAD,CAA9C;AAA2D;;AAC3D,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC;AAAO;AACxDS,IAAAA,EAAE,EAAE,IAD6C;AAEjDC,IAAAA,IAAI,EAAE,IAF2C;AAGjDC,IAAAA,KAAK,EAAE,IAH0C;AAIjDC,IAAAA,UAAU,EAAE;AAJqC,GAAD,CAApD;AAOA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC,CAT2C,CASD;;AAG1C,QAAMe,aAAa,GAAIC,aAAD,IAAmB;AAAE;AACvC,QAAIA,aAAa,KAAK,EAAtB,EAA0B;AAAE;AACxB,aAAOX,WAAP;AACH,KAFD,MAEO;AAAE;AACL,aAAOA,WAAW,CAACY,MAAZ,CAAmBC,OAAO,IAAIA,OAAO,CAACR,IAAR,CAAaS,QAAb,CAAsBH,aAAtB,CAA9B,CAAP;AACH;AACJ,GAND;;AAQA,QAAMI,UAAU,GAAIC,cAAD,IAAoB;AAAE;AACrCf,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBgB,cAAjB,CAAD,CAAd;AAEA;AACH,GAJD;;AAKA,QAAMC,UAAU,GAAIb,EAAD,IAAQ;AAAE;AACzBH,IAAAA,cAAc,CAACD,WAAW,CAACY,MAAZ,CAAmBC,OAAO,IAAIA,OAAO,CAACT,EAAR,KAAeA,EAA7C,CAAD,CAAd;AACH,GAFD;;AAKA,QAAMc,aAAa,GAAG,CAACd,EAAD,EAAKe,IAAL,KAAc;AAAE;AAClClB,IAAAA,cAAc,CAACD,WAAW,CAACoB,GAAZ,CAAgBP,OAAO,IAAIA,OAAO,CAACT,EAAR,KAAeA,EAAf,GAAqB,EAAC,GAAGS,OAAJ;AAAa,SAAGM;AAAhB,KAArB,GAA8CN,OAAzE,CAAD,CAAd,CADgC,CAEhC;AACH,GAHD;;AAKA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC5Bb,MAAAA,WAD4B;AAE5BC,MAAAA,cAF4B;AAG5BC,MAAAA,cAH4B;AAI5BC,MAAAA,iBAJ4B;AAK5BK,MAAAA,MAL4B;AAM5BC,MAAAA,SAN4B;AAO5BC,MAAAA,aAP4B;AAQ5BK,MAAAA,UAR4B;AAS5BE,MAAAA,UAT4B;AAU5BC,MAAAA;AAV4B,KAAhC;AAAA,cAYKnB;AAZL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAnDM;;GAAMD,e;;KAAAA,e;AAqDb,OAAO,MAAMuB,iBAAiB,GAAG;AAAA;;AAAA,SAAM5B,UAAU,CAAC6B,OAAD,CAAhB;AAAA,CAA1B;;IAAMD,iB","sourcesContent":["import {useContext, createContext, useState} from 'react';\r\nimport {dummyData} from '../Data/DummyData';\r\n\r\n\r\nconst studentContext = createContext();\r\n\r\nexport const ContextProvider = ({children}) => {\r\n    const [studentData, setStudentData] = useState(dummyData); /*더미 데이터로 학생 데이터 초기화*/\r\n    const [nowStudentData, setNowStudentData] = useState({      //현재 선택된 학생의 데이터, id 값만 임의로 부여해둠.\r\n        id: null,\r\n        name: null,\r\n        grade: null,\r\n        profileImg: null\r\n    });\r\n\r\n    const [search, setSearch] = useState(''); //검색창 입력 값 받아옴\r\n\r\n\r\n    const filterStudent = (filterKeyword) => { //검색어가 들어갈 때 필터링하는 함수\r\n        if (filterKeyword === '') { //공백이면 그냥 다 출력하도록\r\n            return studentData;\r\n        } else { //아니면 문자열 내부에 키워드가 포함된 애들만 필터링\r\n            return studentData.filter(student => student.name.includes(filterKeyword));\r\n        }\r\n    }\r\n\r\n    const addStudent = (newStudentData) => { // 학생을 추가하는 함수\r\n        setStudentData([...studentData, newStudentData]);\r\n\r\n        /* 학생 정보 담긴 객체 newStuData에 대해, setstuData([...stuData, newStuData]  */\r\n    }\r\n    const delStudent = (id) => { //학생을 제거하는 함수\r\n        setStudentData(studentData.filter(student => student.id !== id));\r\n    }\r\n\r\n\r\n    const modifyStudent = (id, data) => { // 학생 정보를 수정하는 함수\r\n        setStudentData(studentData.map(student => student.id === id ? ({...student, ...data}) : student));\r\n        // id로 동일성 검증, 같다면 속성을 덮어쓰는 식으로 수정, 나머지 경우는 그대로 유지\r\n    }\r\n\r\n    return (\r\n        <studentContext.Provider value={{\r\n            studentData,\r\n            setStudentData,\r\n            nowStudentData,\r\n            setNowStudentData,\r\n            search,\r\n            setSearch,\r\n            filterStudent,\r\n            addStudent,\r\n            delStudent,\r\n            modifyStudent\r\n        }}>\r\n            {children}\r\n        </studentContext.Provider>\r\n    )\r\n};\r\n\r\nexport const useStudentContext = () => useContext(Context);"]},"metadata":{},"sourceType":"module"}